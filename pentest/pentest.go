package main

import (
	"crypto/sha256"
	"fmt"
	"io"
	"os"
)

// checkAPKIntegrity kiểm tra tính toàn vẹn của hai file APK bằng cách so sánh giá trị hash SHA-256
func checkAPKIntegrity(fileA, fileB string) (bool, error) {
	// Hàm phụ để tính toán giá trị hash SHA-256 của một file
	calculateFileHash := func(filename string) (string, error) {
		file, err := os.Open(filename)
		if err != nil {
			return "", err
		}
		defer file.Close()

		hash := sha256.New()
		_, err = io.Copy(hash, file)
		if err != nil {
			return "", err
		}

		return fmt.Sprintf("%x", hash.Sum(nil)), nil
	}

	// Tính toán giá trị hash cho hai file
	hashA, err := calculateFileHash(fileA)
	if err != nil {
		return false, err
	}

	hashB, err := calculateFileHash(fileB)
	if err != nil {
		return false, err
	}
	// So sánh giá trị hash
	return hashA == hashB, nil
}

func main() {
	if len(os.Args) < 7 {
		fmt.Println("Usage: yourprogram -check -p <path_to_fileA> -p1 <path_to_fileB>")
		return
	}

	var fileA, fileB string
	var checkFlag bool

	// Xử lý đối số dòng lệnh
	for i := 1; i < len(os.Args); i++ {
		switch os.Args[i] {
		case "-check":
			checkFlag = true
		case "-p":
			if i+1 < len(os.Args) {
				fileA = os.Args[i+1]
				i++
			} else {
				fmt.Println("Missing value for -p")
				return
			}
		case "-p1":
			if i+1 < len(os.Args) {
				fileB = os.Args[i+1]
				i++
			} else {
				fmt.Println("Missing value for -p1")
				return
			}
		}
	}

	if !checkFlag {
		fmt.Println("-check argument is required")
		return
	}

	if fileA == "" || fileB == "" {
		fmt.Println("Both -p and -p1 arguments are required")
		return
	}

	isValid, err := checkAPKIntegrity(fileA, fileB)
	if err != nil {
		fmt.Printf("Lỗi: %v\n", err)
		return
	}

	if isValid {
		fmt.Println("File B là bản sao chính xác của File A.")
	} else {
		fmt.Println("File B đã bị thay đổi.")
	}
}
